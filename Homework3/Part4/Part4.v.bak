// TCES 330, Spring 2016
// Andrew Gates
// Homework 3, Part 1
//
// Module that uses KEY0 as the clock, SW1 as an input (w), and SW0 as a synchronous reset.
// The module will use an FSM to detect when 4 consecutive 0's or 1's have occured. It will
// progress through the states A - I depending on the value of w when the clock pulses. If the 
// Reset is 0 then the state will stay at A. If the reset is 1 and w is 0 it will progress from
// A -> B -> C -> D -> E where E will cause z to be a value of 1. If the Reset is 1 and w is 1 it 
// will progress from A -> F -> G -> H -> I where I will cause z to be a value of 1.

module Part4 (KEY, SW, HEX0, z);
   input [0:0] KEY;              // KEY0 to activate clock
   input [2:0] SW;               // SW0 = synchronous reset, SW1 = w0 input, SW2 = w1 input
   output [0:6] HEX0;
   wire w1, w0, Reset, Clock;    // Wires used to make code cleaner
   output reg z;                 // Output z
   
   assign Clock = KEY[0];        // Wires used to make code cleaner
   assign Reset = SW[0];         // Wires used to make code cleaner
   assign w = SW[1];             // Wires used to make code cleaner
   
   assign LEDG = z;              // LEDG to show output z
   assign LEDR = State;          // LEDR to show current state
   
   reg [3:0] State, StateNext;   // State represents current state, StateNext represents next state
   
   // Binary values representing states A - I
   localparam INT0 = 4'b0000, INT1 = 4'b0001, INT2 = 4'b0010, INT3 = 4'b0011, INT4 = 4'b0100, 
      INT5 = 4'b0101, INT6 = 4'b0110, INT7 = 4'b0111, INT8 = 4'b1000, INT9 = 4'b1001;
  
   // State Table (Combinational Logic)
   always @(w1, w0, State)
   begin: state_table
      case (State)
         INT0: if (!w1 && !w0) StateNext = INT0;
               else if (!w1 && w0) StateNext = INT1;
               else if (w1 && !w0) StateNext = INT2;
               else StateNext = INT9;
         INT1: if (!w1 && !w0) StateNext = INT1;
               else if (!w1 && w0) StateNext = INT2;
               else if (w1 && !w0) StateNext = INT3;
               else StateNext = INT0;
         INT2: if (!w1 && !w0) StateNext = INT2;
               else if (!w1 && w0) StateNext = INT3;
               else if (w1 && !w0) StateNext = INT4;
               else StateNext = INT1;
         INT3: if (!w1 && !w0) StateNext = INT3;
               else if (!w1 && w0) StateNext = INT4;
               else if (w1 && !w0) StateNext = INT5;
               else StateNext = INT2;
         INT4: if (!w1 && !w0) StateNext = INT4;
               else if (!w1 && w0) StateNext = INT5;
               else if (w1 && !w0) StateNext = INT6;
               else StateNext = INT3;
         INT5: if (!w1 && !w0) StateNext = INT5;
               else if (!w1 && w0) StateNext = INT6;
               else if (w1 && !w0) StateNext = INT7;
               else StateNext = INT4;
         INT6: if (!w1 && !w0) StateNext = INT6;
               else if (!w1 && w0) StateNext = INT7;
               else if (w1 && !w0) StateNext = INT8;
               else StateNext = INT5;
         INT7: if (!w1 && !w0) StateNext = INT7;
               else if (!w1 && w0) StateNext = INT8;
               else if (w1 && !w0) StateNext = INT9;
               else StateNext = INT7;      
         INT8: if (!w1 && !w0) StateNext = INT8;
               else if (!w1 && w0) StateNext = INT9;
               else if (w1 && !w0) StateNext = INT0;
               else StateNext = INT7;      
         INT9: if (!w1 && !w0) StateNext = INT9;
               else if (!w1 && w0) StateNext = INT0;
               else if (w1 && !w0) StateNext = INT1;
               else StateNext = INT8;      
         default: StateNext = 4'bxxxx;
      endcase
   end
   
   // State FFS (State Register)
   always @(posedge Clock)
   begin: state_FFs
      if(Reset == 0)
         State <= A;             // If reset is 0 keep state at A
      else
         State <= StateNext;     // Else progress the state
         
      if(State == E || State == I)
         z <= 1;                 // If State is E or I then 4 0's or 1's occured
      else
         z <= 0;                 // If State is not E or I then there hasn't been 4 0's or 1's yet.
   end 
endmodule




















